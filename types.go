package main


// This file is generated by gen.py. DO NOT EDIT.


var api = &ApiNode{
    Label: "root",
    Children: []*ApiNode{
        {
            Label: "v1",
            Children: []*ApiNode{
                {
                    Label: "cryptocurrency",
                    Children: []*ApiNode{
                        {
                            Label: "airdrop",
                            Url: "/v1/cryptocurrency/airdrop",
                            Args:  map[string]Arg{
                                 "id": {"id", "string", "Airdrop Unique ID. This can be found using the Airdrops API.", ""},
                            },
                        },
                        {
                            Label: "airdrops",
                            Url: "/v1/cryptocurrency/airdrops",
                            Args:  map[string]Arg{
                                 "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                 "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                 "status": {"status", "string", "What status of airdrops.", "\"ONGOING\""},
                                 "id": {"id", "string", "Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1", ""},
                                 "slug": {"slug", "string", "Alternatively filter airdrops by a cryptocurrency slug. Example: \"bitcoin\"", ""},
                                 "symbol": {"symbol", "string", "Alternatively filter airdrops one cryptocurrency symbol. Example: \"BTC\".", ""},
                            },
                        },
                        {
                            Label: "categories",
                            Url: "/v1/cryptocurrency/categories",
                            Args:  map[string]Arg{
                                 "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                 "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", ""},
                                 "id": {"id", "string", "Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2", ""},
                                 "slug": {"slug", "string", "Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                 "symbol": {"symbol", "string", "Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\".", ""},
                            },
                        },
                        {
                            Label: "category",
                            Url: "/v1/cryptocurrency/category",
                            Args:  map[string]Arg{
                                 "id": {"id", "string", "The Category ID. This can be found using the Categories API.", ""},
                                 "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of coins to return.", "1"},
                                 "limit": {"limit", "integer", "Optionally specify the number of coins to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                 "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                 "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                            },
                        },
                        {
                            Label: "map",
                            Url: "/v1/cryptocurrency/map",
                            Args:  map[string]Arg{
                                 "listing_status": {"listing_status", "string", "Only active cryptocurrencies are returned by default. Passinactiveto get a list of cryptocurrencies that are no longer active. Passuntrackedto get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values.", "\"active\""},
                                 "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                 "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", ""},
                                 "sort": {"sort", "string", "What field to sort the list of cryptocurrencies by.", "\"id\""},
                                 "symbol": {"symbol", "string", "Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored.", ""},
                                 "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passplatform,first_historical_data,last_historical_data,is_active,statusto include all auxiliary fields.", "\"platform,first_historical_data,last_historical_data,is_active\""},
                            },
                        },
                        {
                            Label: "listings",
                            Children: []*ApiNode{
                                {
                                    Label: "historical",
                                    Url: "/v1/cryptocurrency/listings/historical",
                                    Args:  map[string]Arg{
                                         "date": {"date", "string", "date (Unix or ISO 8601) to reference day of snapshot.", ""},
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "sort": {"sort", "string", "What field to sort the list of cryptocurrencies by.", "\"cmc_rank\""},
                                         "sort_dir": {"sort_dir", "string", "The direction in which to order cryptocurrencies against the specified sort.", ""},
                                         "cryptocurrency_type": {"cryptocurrency_type", "string", "The type of cryptocurrency to include.", "\"all\""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passplatform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairsto include all auxiliary fields.", "\"platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs\""},
                                    },
                                },
                                {
                                    Label: "latest",
                                    Url: "/v1/cryptocurrency/listings/latest",
                                    Args:  map[string]Arg{
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "price_min": {"price_min", "number", "Optionally specify a threshold of minimum USD price to filter results by.", ""},
                                         "price_max": {"price_max", "number", "Optionally specify a threshold of maximum USD price to filter results by.", ""},
                                         "market_cap_min": {"market_cap_min", "number", "Optionally specify a threshold of minimum market cap to filter results by.", ""},
                                         "market_cap_max": {"market_cap_max", "number", "Optionally specify a threshold of maximum market cap to filter results by.", ""},
                                         "volume_24h_min": {"volume_24h_min", "number", "Optionally specify a threshold of minimum 24 hour USD volume to filter results by.", ""},
                                         "volume_24h_max": {"volume_24h_max", "number", "Optionally specify a threshold of maximum 24 hour USD volume to filter results by.", ""},
                                         "circulating_supply_min": {"circulating_supply_min", "number", "Optionally specify a threshold of minimum circulating supply to filter results by.", ""},
                                         "circulating_supply_max": {"circulating_supply_max", "number", "Optionally specify a threshold of maximum circulating supply to filter results by.", ""},
                                         "percent_change_24h_min": {"percent_change_24h_min", "number", "Optionally specify a threshold of minimum 24 hour percent change to filter results by.", ""},
                                         "percent_change_24h_max": {"percent_change_24h_max", "number", "Optionally specify a threshold of maximum 24 hour percent change to filter results by.", ""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "sort": {"sort", "string", "What field to sort the list of cryptocurrencies by.", "\"market_cap\""},
                                         "sort_dir": {"sort_dir", "string", "The direction in which to order cryptocurrencies against the specified sort.", ""},
                                         "cryptocurrency_type": {"cryptocurrency_type", "string", "The type of cryptocurrency to include.", "\"all\""},
                                         "tag": {"tag", "string", "The tag of cryptocurrency to include.", "\"all\""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calcto include all auxiliary fields.", "\"num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply\""},
                                    },
                                },
                                {
                                    Label: "new",
                                    Url: "/v1/cryptocurrency/listings/new",
                                    Args:  map[string]Arg{
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "sort_dir": {"sort_dir", "string", "The direction in which to order cryptocurrencies against the specified sort.", ""},
                                    },
                                },
                            },
                        },
                        {
                            Label: "trending",
                            Children: []*ApiNode{
                                {
                                    Label: "gainers-losers",
                                    Url: "/v1/cryptocurrency/trending/gainers-losers",
                                    Args:  map[string]Arg{
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "time_period": {"time_period", "string", "Adjusts the overall window of time for the biggest gainers and losers.", "\"24h\""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "sort": {"sort", "string", "What field to sort the list of cryptocurrencies by.", "\"percent_change_24h\""},
                                         "sort_dir": {"sort_dir", "string", "The direction in which to order cryptocurrencies against the specified sort.", ""},
                                    },
                                },
                                {
                                    Label: "latest",
                                    Url: "/v1/cryptocurrency/trending/latest",
                                    Args:  map[string]Arg{
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "time_period": {"time_period", "string", "Adjusts the overall window of time for the latest trending coins.", "\"24h\""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                                {
                                    Label: "most-visited",
                                    Url: "/v1/cryptocurrency/trending/most-visited",
                                    Args:  map[string]Arg{
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "time_period": {"time_period", "string", "Adjusts the overall window of time for most visited currencies.", "\"24h\""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                            },
                        },
                        {
                            Label: "info",
                            Url: "/v1/cryptocurrency/info",
                            Args:  map[string]Arg{
                                 "id": {"id", "string", "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"", ""},
                                 "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                 "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request. Please note that starting in the v2 endpoint, due to the fact that a symbol is not unique, if you request by symbol each data response will contain an array of objects containing all of the coins that use each requested symbol. The v1 endpoint will still return a single object, the highest ranked coin using that symbol.", ""},
                                 "address": {"address", "string", "Alternatively pass in a contract address. Example: \"0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\"", ""},
                                 "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "false"},
                                 "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passurls,logo,description,tags,platform,date_added,notice,statusto include all auxiliary fields.", "\"urls,logo,description,tags,platform,date_added,notice\""},
                            },
                        },
                        {
                            Label: "market-pairs",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v1/cryptocurrency/market-pairs/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \"1\"", ""},
                                         "slug": {"slug", "string", "Alternatively pass a cryptocurrency by slug. Example: \"bitcoin\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \"BTC\". A single cryptocurrency \"id\", \"slug\",or\"symbol\" is required.", ""},
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "sort_dir": {"sort_dir", "string", "Optionally specify the sort direction of markets returned.", "\"desc\""},
                                         "sort": {"sort", "string", "Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Passcmc_rankto return a CMC methodology based sort where markets with excluded volumes are returned last.", "\"volume_24h_strict\""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputationto include all auxiliary fields.", "\"num_market_pairs,category,fee_type\""},
                                         "matched_id": {"matched_id", "string", "Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example?id=1&matched_id=2781would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used whenmatched_symbolis used.", ""},
                                         "matched_symbol": {"matched_symbol", "string", "Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example?symbol=BTC&matched_symbol=USDwould only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used whenmatched_idis used.", ""},
                                         "category": {"category", "string", "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.", "\"all\""},
                                         "fee_type": {"fee_type", "string", "The fee type the exchange enforces for this market.", "\"all\""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                            },
                        },
                        {
                            Label: "ohlcv",
                            Children: []*ApiNode{
                                {
                                    Label: "historical",
                                    Url: "/v1/cryptocurrency/ohlcv/historical",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,1027\"", ""},
                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request.", ""},
                                         "time_period": {"time_period", "string", "Time period to return OHLCV data for. The default is \"daily\". If hourly, the open will be 01:00 and the close will be 01:59. If daily, the open will be 00:00:00 for the day and close will be 23:59:99 for the same day. See the main endpoint description for details.", "\"daily\""},
                                         "time_start": {"time_start", "string", "Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.", ""},
                                         "time_end": {"time_end", "string", "Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we'll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.", ""},
                                         "count": {"count", "number", "Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items.", "10"},
                                         "interval": {"interval", "string", "Optionally adjust the interval that \"time_period\" is sampled. For example with interval=monthly&time_period=daily you will see a daily OHLCV record for January, February, March and so on. See main endpoint description for available options.", "\"daily\""},
                                         "convert": {"convert", "string", "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                            },
                        },
                        {
                            Label: "price-performance-stats",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v1/cryptocurrency/price-performance-stats/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2", ""},
                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request.", ""},
                                         "time_period": {"time_period", "string", "Specify one or more comma-delimited time periods to return stats for.all_timeis the default. Passall_time,yesterday,24h,7d,30d,90d,365dto return all supported time periods. All rolling periods have a rolling close time of the current request time. For example24hwould have a close time of now and an open time of 24 hours before now.Please note:yesterdayis a UTC period and currently does not currently supporthighandlowtimestamps.", "\"all_time\""},
                                         "convert": {"convert", "string", "Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                            },
                        },
                        {
                            Label: "quotes",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v1/cryptocurrency/quotes/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2", ""},
                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request.", ""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiatto include all auxiliary fields.", "\"num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat\""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    Label: "fiat",
                    Children: []*ApiNode{
                        {
                            Label: "map",
                            Url: "/v1/fiat/map",
                            Args:  map[string]Arg{
                                 "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                 "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", ""},
                                 "sort": {"sort", "string", "What field to sort the list by.", "\"id\""},
                                 "include_metals": {"include_metals", "boolean", "Passtrueto include precious metals.", "false"},
                            },
                        },
                    },
                },
                {
                    Label: "exchange",
                    Children: []*ApiNode{
                        {
                            Label: "assets",
                            Url: "/v1/exchange/assets",
                            Args:  map[string]Arg{
                                 "id": {"id", "string", "A CoinMarketCap exchange ID. Example: 270", ""},
                            },
                        },
                        {
                            Label: "info",
                            Url: "/v1/exchange/info",
                            Args:  map[string]Arg{
                                 "id": {"id", "string", "One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \"1,2\"", ""},
                                 "slug": {"slug", "string", "Alternatively, one or more comma-separated exchange names in URL friendly shorthand \"slug\" format (all lowercase, spaces replaced with hyphens). Example: \"binance,gdax\". At least one \"id\"or\"slug\" is required.", ""},
                                 "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passurls,logo,description,date_launched,notice,statusto include all auxiliary fields.", "\"urls,logo,description,date_launched,notice\""},
                            },
                        },
                        {
                            Label: "map",
                            Url: "/v1/exchange/map",
                            Args:  map[string]Arg{
                                 "listing_status": {"listing_status", "string", "Only active exchanges are returned by default. Passinactiveto get a list of exchanges that are no longer active. Passuntrackedto get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values.", "\"active\""},
                                 "slug": {"slug", "string", "Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored.", ""},
                                 "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                 "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", ""},
                                 "sort": {"sort", "string", "What field to sort the list of exchanges by.", "\"id\""},
                                 "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passfirst_historical_data,last_historical_data,is_active,statusto include all auxiliary fields.", "\"first_historical_data,last_historical_data,is_active\""},
                                 "crypto_id": {"crypto_id", "string", "Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example?crypto_id=1would only return exchanges that have BTC.", ""},
                            },
                        },
                        {
                            Label: "listings",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v1/exchange/listings/latest",
                                    Args:  map[string]Arg{
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "sort": {"sort", "string", "What field to sort the list of exchanges by.", "\"volume_24h\""},
                                         "sort_dir": {"sort_dir", "string", "The direction in which to order exchanges against the specified sort.", ""},
                                         "market_type": {"market_type", "string", "The type of exchange markets to include in rankings. This field is deprecated. Please use \"all\" for accurate sorting.", "\"all\""},
                                         "category": {"category", "string", "The category for this exchange.", "\"all\""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiatsto include all auxiliary fields.", "\"num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h\""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                            },
                        },
                        {
                            Label: "market-pairs",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v1/exchange/market-pairs/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "A CoinMarketCap exchange ID. Example: \"1\"", ""},
                                         "slug": {"slug", "string", "Alternatively pass an exchange \"slug\" (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \"binance\". One \"id\"or\"slug\" is required.", ""},
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputationto include all auxiliary fields.", "\"num_market_pairs,category,fee_type\""},
                                         "matched_id": {"matched_id", "string", "Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example?matched_id=2781would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\" for the requested exchange. This parameter cannot be used whenmatched_symbolis used.", ""},
                                         "matched_symbol": {"matched_symbol", "string", "Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example?matched_symbol=USDwould only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\" for the requested exchange. This parameter cannot be used whenmatched_idis used.", ""},
                                         "category": {"category", "string", "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.", "\"all\""},
                                         "fee_type": {"fee_type", "string", "The fee type the exchange enforces for this market.", "\"all\""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                            },
                        },
                        {
                            Label: "quotes",
                            Children: []*ApiNode{
                                {
                                    Label: "historical",
                                    Url: "/v1/exchange/quotes/historical",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated exchange CoinMarketCap ids. Example: \"24,270\"", ""},
                                         "slug": {"slug", "string", "Alternatively, one or more comma-separated exchange names in URL friendly shorthand \"slug\" format (all lowercase, spaces replaced with hyphens). Example: \"binance,kraken\". At least one \"id\"or\"slug\" is required.", ""},
                                         "time_start": {"time_start", "string", "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".", ""},
                                         "time_end": {"time_end", "string", "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.", ""},
                                         "count": {"count", "number", "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.", "10"},
                                         "interval": {"interval", "string", "Interval of time to return data points for. See details in endpoint description.", "\"5m\""},
                                         "convert": {"convert", "string", "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                                {
                                    Label: "latest",
                                    Url: "/v1/exchange/quotes/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated CoinMarketCap exchange IDs. Example: \"1,2\"", ""},
                                         "slug": {"slug", "string", "Alternatively, pass a comma-separated list of exchange \"slugs\" (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \"binance,gdax\". At least one \"id\"or\"slug\" is required.", ""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24hto include all auxiliary fields.", "\"num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h\""},
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    Label: "global-metrics",
                    Children: []*ApiNode{
                        {
                            Label: "quotes",
                            Children: []*ApiNode{
                                {
                                    Label: "historical",
                                    Url: "/v1/global-metrics/quotes/historical",
                                    Args:  map[string]Arg{
                                         "time_start": {"time_start", "string", "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".", ""},
                                         "time_end": {"time_end", "string", "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.", ""},
                                         "count": {"count", "number", "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.", "10"},
                                         "interval": {"interval", "string", "Interval of time to return data points for. See details in endpoint description.", "\"1d\""},
                                         "convert": {"convert", "string", "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passbtc_dominance,eth_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_intervalto include all auxiliary fields.", "\"btc_dominance,eth_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported\""},
                                    },
                                },
                                {
                                    Label: "latest",
                                    Url: "/v1/global-metrics/quotes/latest",
                                    Args:  map[string]Arg{
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    Label: "tools",
                    Children: []*ApiNode{
                        {
                            Label: "postman",
                            Url: "/v1/tools/postman",
                            Args:  map[string]Arg{
                            },
                        },
                        {
                            Label: "price-conversion",
                            Url: "/v1/tools/price-conversion",
                            Args:  map[string]Arg{
                                 "amount": {"amount", "number", "An amount of currency to convert. Example: 10.43", ""},
                                 "id": {"id", "string", "The CoinMarketCap currency ID of the base cryptocurrency or fiat to convert from. Example: \"1\"", ""},
                                 "symbol": {"symbol", "string", "Alternatively the currency symbol of the base cryptocurrency or fiat to convert from. Example: \"BTC\". One \"id\"or\"symbol\" is required. Please note that starting in the v2 endpoint, due to the fact that a symbol is not unique, if you request by symbol each quote response will contain an array of objects containing all of the coins that use each requested symbol. The v1 endpoint will still return a single object, the highest ranked coin using that symbol.", ""},
                                 "time": {"time", "string", "Optional timestamp (Unix or ISO 8601) to reference historical pricing during conversion. If not passed, the current time will be used. If passed, we'll reference the closest historic values available for this conversion.", ""},
                                 "convert": {"convert", "string", "Pass up to 120 comma-separated fiat or cryptocurrency symbols to convert the source amount to.", ""},
                                 "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                            },
                        },
                    },
                },
                {
                    Label: "blockchain",
                    Children: []*ApiNode{
                        {
                            Label: "statistics",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v1/blockchain/statistics/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated cryptocurrency CoinMarketCap IDs to return blockchain data for. Pass1,2,1027to request all currently supported blockchains.", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. PassBTC,LTC,ETHto request all currently supported blockchains.", ""},
                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Passbitcoin,litecoin,ethereumto request all currently supported blockchains.", ""},
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    Label: "key",
                    Children: []*ApiNode{
                        {
                            Label: "info",
                            Url: "/v1/key/info",
                            Args:  map[string]Arg{
                            },
                        },
                    },
                },
                {
                    Label: "partners",
                    Children: []*ApiNode{
                        {
                            Label: "flipside-crypto",
                            Children: []*ApiNode{
                                {
                                    Label: "fcas",
                                    Children: []*ApiNode{
                                        {
                                            Label: "quotes",
                                            Children: []*ApiNode{
                                                {
                                                    Label: "latest",
                                                    Url: "/v1/partners/flipside-crypto/fcas/quotes/latest",
                                                    Args:  map[string]Arg{
                                                         "id": {"id", "string", "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2", ""},
                                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request.", ""},
                                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passpoint_change_24h,percent_change_24hto include all auxiliary fields.", "\"point_change_24h,percent_change_24h\""},
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    Label: "community",
                    Children: []*ApiNode{
                        {
                            Label: "trending",
                            Children: []*ApiNode{
                                {
                                    Label: "token",
                                    Url: "/v1/community/trending/token",
                                    Args:  map[string]Arg{
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return.", "5"},
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    Label: "content",
                    Children: []*ApiNode{
                        {
                            Label: "posts",
                            Children: []*ApiNode{
                                {
                                    Label: "comments",
                                    Url: "/v1/content/posts/comments",
                                    Args:  map[string]Arg{
                                         "post_id": {"post_id", "string", "Required post ID. Example: 325670123", ""},
                                    },
                                },
                                {
                                    Label: "top",
                                    Url: "/v1/content/posts/top",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "Optional one cryptocurrency CoinMarketCap ID. Example: 1027", ""},
                                         "slug": {"slug", "string", "Alternatively pass one cryptocurrency slug. Example: \"ethereum\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one cryptocurrency symbols. Example: \"ETH\"", ""},
                                         "last_score": {"last_score", "string", "Optional. The score is given in the response for finding next batch of related posts. Example: 38507.8865", ""},
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },
        {
            Label: "v2",
            Children: []*ApiNode{
                {
                    Label: "cryptocurrency",
                    Children: []*ApiNode{
                        {
                            Label: "info",
                            Url: "/v2/cryptocurrency/info",
                            Args:  map[string]Arg{
                                 "id": {"id", "string", "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"", ""},
                                 "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                 "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request. Please note that starting in the v2 endpoint, due to the fact that a symbol is not unique, if you request by symbol each data response will contain an array of objects containing all of the coins that use each requested symbol. The v1 endpoint will still return a single object, the highest ranked coin using that symbol.", ""},
                                 "address": {"address", "string", "Alternatively pass in a contract address. Example: \"0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\"", ""},
                                 "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "false"},
                                 "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passurls,logo,description,tags,platform,date_added,notice,statusto include all auxiliary fields.", "\"urls,logo,description,tags,platform,date_added,notice\""},
                            },
                        },
                        {
                            Label: "market-pairs",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v2/cryptocurrency/market-pairs/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \"1\"", ""},
                                         "slug": {"slug", "string", "Alternatively pass a cryptocurrency by slug. Example: \"bitcoin\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \"BTC\". A single cryptocurrency \"id\", \"slug\",or\"symbol\" is required.", ""},
                                         "start": {"start", "integer", "Optionally offset the start (1-based index) of the paginated list of items to return.", "1"},
                                         "limit": {"limit", "integer", "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.", "100"},
                                         "sort_dir": {"sort_dir", "string", "Optionally specify the sort direction of markets returned.", "\"desc\""},
                                         "sort": {"sort", "string", "Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Passcmc_rankto return a CMC methodology based sort where markets with excluded volumes are returned last.", "\"volume_24h_strict\""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputationto include all auxiliary fields.", "\"num_market_pairs,category,fee_type\""},
                                         "matched_id": {"matched_id", "string", "Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example?id=1&matched_id=2781would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used whenmatched_symbolis used.", ""},
                                         "matched_symbol": {"matched_symbol", "string", "Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example?symbol=BTC&matched_symbol=USDwould only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used whenmatched_idis used.", ""},
                                         "category": {"category", "string", "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.", "\"all\""},
                                         "fee_type": {"fee_type", "string", "The fee type the exchange enforces for this market.", "\"all\""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                    },
                                },
                            },
                        },
                        {
                            Label: "ohlcv",
                            Children: []*ApiNode{
                                {
                                    Label: "historical",
                                    Url: "/v2/cryptocurrency/ohlcv/historical",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,1027\"", ""},
                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request.", ""},
                                         "time_period": {"time_period", "string", "Time period to return OHLCV data for. The default is \"daily\". If hourly, the open will be 01:00 and the close will be 01:59. If daily, the open will be 00:00:00 for the day and close will be 23:59:99 for the same day. See the main endpoint description for details.", "\"daily\""},
                                         "time_start": {"time_start", "string", "Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.", ""},
                                         "time_end": {"time_end", "string", "Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we'll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.", ""},
                                         "count": {"count", "number", "Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items.", "10"},
                                         "interval": {"interval", "string", "Optionally adjust the interval that \"time_period\" is sampled. For example with interval=monthly&time_period=daily you will see a daily OHLCV record for January, February, March and so on. See main endpoint description for available options.", "\"daily\""},
                                         "convert": {"convert", "string", "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                                {
                                    Label: "latest",
                                    Url: "/v2/cryptocurrency/ohlcv/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"symbol\" is required.", ""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                            },
                        },
                        {
                            Label: "price-performance-stats",
                            Children: []*ApiNode{
                                {
                                    Label: "latest",
                                    Url: "/v2/cryptocurrency/price-performance-stats/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2", ""},
                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request.", ""},
                                         "time_period": {"time_period", "string", "Specify one or more comma-delimited time periods to return stats for.all_timeis the default. Passall_time,yesterday,24h,7d,30d,90d,365dto return all supported time periods. All rolling periods have a rolling close time of the current request time. For example24hwould have a close time of now and an open time of 24 hours before now.Please note:yesterdayis a UTC period and currently does not currently supporthighandlowtimestamps.", "\"all_time\""},
                                         "convert": {"convert", "string", "Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                            },
                        },
                        {
                            Label: "quotes",
                            Children: []*ApiNode{
                                {
                                    Label: "historical",
                                    Url: "/v2/cryptocurrency/quotes/historical",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"symbol\" is required for this request.", ""},
                                         "time_start": {"time_start", "string", "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".", ""},
                                         "time_end": {"time_end", "string", "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.", ""},
                                         "count": {"count", "number", "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.", "10"},
                                         "interval": {"interval", "string", "Interval of time to return data points for. See details in endpoint description.", "\"5m\""},
                                         "convert": {"convert", "string", "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passprice,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat,search_intervalto include all auxiliary fields.", "\"price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat\""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                                {
                                    Label: "latest",
                                    Url: "/v2/cryptocurrency/quotes/latest",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2", ""},
                                         "slug": {"slug", "string", "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"slug\"or\"symbol\" is required for this request.", ""},
                                         "convert": {"convert", "string", "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be foundhere. Each conversion is returned in its own \"quote\" object.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passnum_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiatto include all auxiliary fields.", "\"num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat\""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    Label: "tools",
                    Children: []*ApiNode{
                        {
                            Label: "price-conversion",
                            Url: "/v2/tools/price-conversion",
                            Args:  map[string]Arg{
                                 "amount": {"amount", "number", "An amount of currency to convert. Example: 10.43", ""},
                                 "id": {"id", "string", "The CoinMarketCap currency ID of the base cryptocurrency or fiat to convert from. Example: \"1\"", ""},
                                 "symbol": {"symbol", "string", "Alternatively the currency symbol of the base cryptocurrency or fiat to convert from. Example: \"BTC\". One \"id\"or\"symbol\" is required. Please note that starting in the v2 endpoint, due to the fact that a symbol is not unique, if you request by symbol each quote response will contain an array of objects containing all of the coins that use each requested symbol. The v1 endpoint will still return a single object, the highest ranked coin using that symbol.", ""},
                                 "time": {"time", "string", "Optional timestamp (Unix or ISO 8601) to reference historical pricing during conversion. If not passed, the current time will be used. If passed, we'll reference the closest historic values available for this conversion.", ""},
                                 "convert": {"convert", "string", "Pass up to 120 comma-separated fiat or cryptocurrency symbols to convert the source amount to.", ""},
                                 "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                            },
                        },
                    },
                },
            },
        },
        {
            Label: "v3",
            Children: []*ApiNode{
                {
                    Label: "cryptocurrency",
                    Children: []*ApiNode{
                        {
                            Label: "quotes",
                            Children: []*ApiNode{
                                {
                                    Label: "historical",
                                    Url: "/v3/cryptocurrency/quotes/historical",
                                    Args:  map[string]Arg{
                                         "id": {"id", "string", "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"", ""},
                                         "symbol": {"symbol", "string", "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\"or\"symbol\" is required for this request.", ""},
                                         "time_start": {"time_start", "string", "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".", ""},
                                         "time_end": {"time_end", "string", "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.", ""},
                                         "count": {"count", "number", "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.", "10"},
                                         "interval": {"interval", "string", "Interval of time to return data points for. See details in endpoint description.", "\"5m\""},
                                         "convert": {"convert", "string", "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.", ""},
                                         "convert_id": {"convert_id", "string", "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical toconvertoutside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used whenconvertis used.", ""},
                                         "aux": {"aux", "string", "Optionally specify a comma-separated list of supplemental data fields to return. Passprice,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat,search_intervalto include all auxiliary fields.", "\"price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat\""},
                                         "skip_invalid": {"skip_invalid", "boolean", "Passtrueto relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.", "true"},
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },
    },
}
